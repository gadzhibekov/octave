% Задаем параметры задачи
a = 0.1; % Начало интервала
b = 0.8; % Конец интервала
l = b - a; % Длина интервала
A = 3; % Значение на левой границе
B = 1; % Значение на правой границе
tau = 0.05; % Шаг по времени
h = 0.1; % Шаг по пространству
T = 2; % Общее время моделирования

% Определяем вектор пространственных координат
x = a:h:b; % Создание сетки из точек [a, b] с шагом h
Nx = length(x); % Количество пространственных точек
nt = round(T / tau); % Количество временных шагов
tvec = 0:tau:T; % Вектор временных значений

% Инициализируем матрицу для решения
u = zeros(Nx, nt + 1); % Программа по умолчанию устанавливает значение нульевой матрицы Nx на nt+1

% Установка начальных условий
for i = 1:Nx
    % Устанавливаем начальные значения для каждой точки x
    u(i, 1) = ((A - B) * (x(i) - a)) / l + A; % Линейная интерполяция для начальной температуры
end

% Определяем функции коэффициента и источника
k = @(x) cos(x); % Функция коэффициента
f = @(x) 10 * sin(x); % Функция источника

% Вычисление полусредних значений коэффициентов
k_half = zeros(Nx - 1, 1); % Инициализация вектора для полусредних значений
for i = 1:(Nx - 1)
    % Вычисляем среднее значение k на интервале между x(i) и x(i+1)
    k_half(i) = (k(x(i)) + k(x(i + 1))) / 2; 
end

% Основной временной цикл
for n = 1:nt
    u_new = u(:, n); % Копируем текущее состояние в новую переменную
    current_t = tvec(n); % Получаем текущее время
    
    % Цикл по пространственным точкам
    for i = 2:(Nx - 1)
        % Вычисляем вторую производную по пространству
        d2udx = ( k_half(i) * (u(i + 1, n) - u(i, n)) - k_half(i - 1) * (u(i, n) - u(i - 1, n)) ) / h^2;
        u_new(i) = u(i, n) + tau * ( d2udx + f(x(i)) * (1 - exp(-current_t))); % Обновляем значение u с учетом второй производной и источника
    end
    
    % Установка граничных условий
    u_new(1) = A; % Левое граничное значение u
    u_new(Nx) = B; % Правое граничное значение u
    
    % Сохраняем новое состояние в матрицу
    u(:, n + 1) = u_new; 
end

% Вычисление среднего значения между первыми двумя временными шагами
u_halfTau = (u(:, 1) + u(:, 2)) / 2;

% Извлечение значений u в указанные временные моменты
index_10tau = 10 + 1; % Индекс для 10tau
u_10tau = u(:, index_10tau); % Значения на временном моменте 10tau

index_20tau = 20 + 1; % Индекс для 20tau
u_20tau = u(:, index_20tau); % Значения на временном моменте 20tau

% Визуализация результатов
figure; % Создание новой фигуры
plot(x, u_halfTau, 'r-o', 'LineWidth', 1.5); hold on; % График для t = 0.5tau
plot(x, u_10tau, 'b-s', 'LineWidth', 1.5); % График для t = 10tau
plot(x, u_20tau, 'g-^', 'LineWidth', 1.5); % График для t = 20tau
xlabel('x'); % Подпись для оси x
ylabel('u(x,t)'); % Подпись для оси y
legend('t = 0.5\tau', 't = 10\tau', 't = 20\tau'); % Легенда для графиков
title('Приближенное решение задачи методом явной разностной схемы'); % Заголовок графика
grid on; % Включение сетки